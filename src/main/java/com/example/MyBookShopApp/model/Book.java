package com.example.MyBookShopApp.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.Getter;
import lombok.Setter;

import javax.persistence.*;
import java.sql.Date;
import java.util.List;
import java.util.Set;

@Entity
@Table(name = "books")
@ApiModel(description = "entity representing a book")
@Getter
@Setter
public class Book {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @ApiModelProperty("id generated by db automaticaly")
    private Integer id;

    @Column(name = "pub_date")
    @ApiModelProperty("date of book publication")
    private Date pubDate;

    @Column(name = "is_bestseller")
    @ApiModelProperty("if isBestseller = 1 so the book is considered to be bestseller and  if 0 the book is not a " +
            "bestseller")
    private Integer isBestseller;

    @ApiModelProperty("mnemonical identity sequence of characters")
    private String slug;

    @ApiModelProperty("book title")
    private String title;
    @ApiModelProperty("image url")
    private String image;

    @Column(columnDefinition = "TEXT")
    @ApiModelProperty("book description text")
    private String description;

    @Column(name = "price")
    @JsonProperty("price")
    @ApiModelProperty("book price without discount")
    private Integer price;

    @Column(name = "discount", nullable = false)
    @JsonProperty("discount")
    @ApiModelProperty("discount value for book")
    private Integer discount;

    @Column(name = "purchase_number")
    private Integer purchaseNumber;

    @Column(name = "cart_number")
    private Integer cartNumber;

    @Column(name = "postponed_number")
    private Integer postponedNumber;

    @ManyToOne
    @JoinColumn(columnDefinition = "tag_id", referencedColumnName = "id")
    private Tag tag;

    @OneToMany(mappedBy = "book")
    @JsonIgnore
    private Set<Book2User> book2User;

    @OneToMany(mappedBy = "book")
    @JsonIgnore
    private Set<Book2Genre> book2Genre;

    @OneToMany(mappedBy = "book")
    @JsonIgnore
    private Set<Book2Author> book2Author;

    @OneToMany(mappedBy = "book")
    @JsonIgnore
    private List<Rating> bookRating;

    @OneToMany(mappedBy = "book")
    @JsonIgnore
    private List<BookReview> bookReview;

    @Transient
    @JsonProperty("author")
    private Author author;

    @Transient
    private Integer discountPrice;

    @Transient
    @JsonIgnore
    private List<String> ratingStars;

    //==================================================================================================================
    @Override
    public String toString() {
        return "Book{" +
                "id=" + id +
                ", pubDate=" + pubDate +
                ", isBestseller=" + isBestseller +
                ", slug='" + slug + '\'' +
                ", title='" + title + '\'' +
                ", image='" + image + '\'' +
                ", description='" + description + '\'' +
                ", price=" + price +
                ", discount=" + discount +
                ", purchaseNumber=" + purchaseNumber +
                ", cartNumber=" + cartNumber +
                ", postponedNumber=" + postponedNumber +
                ", tag=" + tag +
                ", author=" + author +
                ", discountPrice=" + discountPrice +
                '}';
    }
}
